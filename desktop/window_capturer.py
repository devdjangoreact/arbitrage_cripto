import os
import threading
import time
import tkinter as tk
from tkinter import messagebox, ttk

import pyautogui
import pygetwindow as gw
from PIL import Image, ImageTk


class WindowCapturer:
    """–ö–ª–∞—Å –¥–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É –≤—ñ–∫–æ–Ω –ø—Ä–æ–≥—Ä–∞–º —Ç–∞ —ó—Ö –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —É tkinter"""

    def __init__(self, root):
        self.root = root
        self.root.title("Window Appearance Copier")
        self.root.geometry("1200x800")
        self.root.configure(bg="#2e2e2e")

        # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è
        self.windows_list = []
        self.selected_window = None
        self.captured_image = None
        self.auto_refresh = False

        self.create_gui()
        self.load_windows_list()

    def create_gui(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –ì–æ–ª–æ–≤–Ω–∏–π —Ñ—Ä–µ–π–º
        main_frame = tk.Frame(self.root, bg="#2e2e2e")
        main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ü–∞–Ω–µ–ª—å –≤–∏–±–æ—Ä—É –≤—ñ–∫–Ω–∞
        selection_frame = tk.LabelFrame(
            main_frame, text="–í–∏–±—ñ—Ä –≤—ñ–∫–Ω–∞ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è", bg="#2e2e2e", fg="white", font=("Arial", 12, "bold")
        )
        selection_frame.pack(fill=tk.X, pady=(0, 10))

        # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤—ñ–∫–æ–Ω
        list_frame = tk.Frame(selection_frame, bg="#2e2e2e")
        list_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Å–ø–∏—Å–∫—É
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.windows_listbox = tk.Listbox(
            list_frame,
            bg="#3e3e3e",
            fg="white",
            selectbackground="#4e4e4e",
            font=("Arial", 10),
            yscrollcommand=scrollbar.set,
        )
        self.windows_listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=self.windows_listbox.yview)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        btn_frame = tk.Frame(selection_frame, bg="#2e2e2e")
        btn_frame.pack(fill=tk.X, pady=5)

        tk.Button(btn_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫", command=self.load_windows_list, bg="#4e4e4e", fg="white").pack(
            side=tk.LEFT, padx=2
        )

        tk.Button(btn_frame, text="üì∏ –ó–∞—Ö–æ–ø–∏—Ç–∏ –≤–∏–≥–ª—è–¥", command=self.capture_window, bg="#5e5e5e", fg="white").pack(
            side=tk.LEFT, padx=2
        )

        tk.Button(btn_frame, text="üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç–∏ —É tkinter", command=self.show_in_tkinter, bg="#6e6e5e", fg="white").pack(
            side=tk.LEFT, padx=2
        )

        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        self.auto_refresh_var = tk.BooleanVar()
        auto_refresh_cb = tk.Checkbutton(
            btn_frame,
            text="–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 2—Å",
            variable=self.auto_refresh_var,
            command=self.toggle_auto_refresh,
            bg="#2e2e2e",
            fg="white",
            selectcolor="#4e4e4e",
        )
        auto_refresh_cb.pack(side=tk.RIGHT)

        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞—Ö–æ–ø–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        display_frame = tk.LabelFrame(
            main_frame, text="–ó–∞—Ö–æ–ø–ª–µ–Ω–∏–π –≤–∏–≥–ª—è–¥ –≤—ñ–∫–Ω–∞", bg="#2e2e2e", fg="white", font=("Arial", 12, "bold")
        )
        display_frame.pack(fill=tk.BOTH, expand=True)

        # –ü–æ–ª–æ—Ç–Ω–æ –¥–ª—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.canvas = tk.Canvas(display_frame, bg="#1e1e1e", highlightthickness=1, highlightbackground="#4e4e4e")
        self.canvas.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_var = tk.StringVar(value="–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        status_bar = tk.Label(main_frame, textvariable=self.status_var, bg="#4e4e4e", fg="white", anchor="w")
        status_bar.pack(fill=tk.X, pady=(5, 0))

        # –ü—Ä–∏–≤'—è–∑—É—î–º–æ –ø–æ–¥–≤—ñ–π–Ω–∏–π –∫–ª—ñ–∫ –¥–æ —Å–ø–∏—Å–∫—É
        self.windows_listbox.bind("<Double-Button-1>", lambda e: self.capture_window())

    def load_windows_list(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –≤—ñ–∫–æ–Ω"""
        try:
            windows = gw.getAllWindows()
            self.windows_list = [w for w in windows if w.title and not w.isMinimized]

            # –û—á–∏—â—É—î–º–æ —Å–ø–∏—Å–æ–∫
            self.windows_listbox.delete(0, tk.END)

            # –î–æ–¥–∞—î–º–æ –≤—ñ–∫–Ω–∞ –¥–æ —Å–ø–∏—Å–∫—É
            for window in self.windows_list:
                title = window.title[:50] + "..." if len(window.title) > 50 else window.title
                self.windows_listbox.insert(tk.END, f"{title} | {window.size}")

            self.status_var.set(f"–ó–Ω–∞–π–¥–µ–Ω–æ {len(self.windows_list)} –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –≤—ñ–∫–æ–Ω")

        except Exception as e:
            self.status_var.set(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤—ñ–∫–æ–Ω: {str(e)}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—ñ–∫–æ–Ω:\n{str(e)}")

    def capture_window(self):
        """–ó–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É –æ–±—Ä–∞–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞"""
        selection = self.windows_listbox.curselection()
        if not selection:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–û–±–µ—Ä—ñ—Ç—å –≤—ñ–∫–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É")
            return

        try:
            self.selected_window = self.windows_list[selection[0]]
            self.status_var.set(f"–ó–∞—Ö–æ–ø–ª—é—é –≤–∏–≥–ª—è–¥ –≤—ñ–∫–Ω–∞: {self.selected_window.title}")

            # –ó–∞—Ö–æ–ø–ª—é—î–º–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç –≤—ñ–∫–Ω–∞
            screenshot = pyautogui.screenshot(
                region=(
                    self.selected_window.left,
                    self.selected_window.top,
                    self.selected_window.width,
                    self.selected_window.height,
                )
            )

            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–ª—è tkinter
            self.captured_image = ImageTk.PhotoImage(screenshot)

            # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –Ω–∞ –ø–æ–ª–æ—Ç–Ω—ñ
            self.canvas.delete("all")
            self.canvas.create_image(0, 0, anchor=tk.NW, image=self.captured_image)

            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))

            self.status_var.set(f"–ó–∞—Ö–æ–ø–ª–µ–Ω–æ: {self.selected_window.title} ({screenshot.size})")

        except Exception as e:
            self.status_var.set(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è: {str(e)}")
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Ö–æ–ø–∏—Ç–∏ –≤—ñ–∫–Ω–æ:\n{str(e)}")

    def show_in_tkinter(self):
        """–í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞—Ö–æ–ø–ª–µ–Ω–æ–≥–æ –≤–∏–≥–ª—è–¥—É —É –Ω–æ–≤–æ–º—É –≤—ñ–∫–Ω—ñ tkinter"""
        if not self.captured_image:
            messagebox.showwarning("–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è", "–°–ø–æ—á–∞—Ç–∫—É –∑–∞—Ö–æ–ø—ñ—Ç—å –≤–∏–≥–ª—è–¥ –≤—ñ–∫–Ω–∞")
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ –≤—ñ–∫–Ω–æ
        preview_window = tk.Toplevel(self.root)
        preview_window.title(f"–ö–æ–ø—ñ—è –≤–∏–≥–ª—è–¥—É: {self.selected_window.title}")
        preview_window.geometry(f"{self.selected_window.width}x{self.selected_window.height}")

        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª–æ—Ç–Ω–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        canvas = tk.Canvas(preview_window, bg="#1e1e1e")
        canvas.pack(fill=tk.BOTH, expand=True)

        # –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        canvas.create_image(0, 0, anchor=tk.NW, image=self.captured_image)

        # –î–æ–¥–∞—î–º–æ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∏ –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å
        h_scrollbar = tk.Scrollbar(preview_window, orient=tk.HORIZONTAL, command=canvas.xview)
        v_scrollbar = tk.Scrollbar(preview_window, orient=tk.VERTICAL, command=canvas.yview)

        canvas.config(xscrollcommand=h_scrollbar.set, yscrollcommand=v_scrollbar.set)
        canvas.config(scrollregion=canvas.bbox(tk.ALL))

        h_scrollbar.pack(side=tk.BOTTOM, fill=tk.X)
        v_scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

    def toggle_auto_refresh(self):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
        if self.auto_refresh_var.get():
            self.start_auto_refresh()
        else:
            self.stop_auto_refresh()

    def start_auto_refresh(self):
        """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
        if not hasattr(self, "_auto_refresh_thread") or not self._auto_refresh_thread.is_alive():
            self.auto_refresh = True
            self._auto_refresh_thread = threading.Thread(target=self._auto_refresh_worker, daemon=True)
            self._auto_refresh_thread.start()
            self.status_var.set("–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ")

    def stop_auto_refresh(self):
        """–ó—É–ø–∏–Ω–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
        self.auto_refresh = False
        self.status_var.set("–ê–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ")

    def _auto_refresh_worker(self):
        """–†–æ–±–æ—á–∏–π –ø–æ—Ç—ñ–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è"""
        while self.auto_refresh:
            try:
                if self.selected_window and not self.selected_window.isMinimized:
                    self.capture_window()
                time.sleep(2)  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 2 —Å–µ–∫—É–Ω–¥–∏
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ–æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
                time.sleep(1)


def create_window_capturer():
    """–§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞ –¥–ª—è –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É –ø—Ä–æ–≥—Ä–∞–º"""
    root = tk.Tk()
    app = WindowCapturer(root)
    return root


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É
    root = create_window_capturer()
    root.mainloop()
